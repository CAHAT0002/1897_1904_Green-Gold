title: Post Event
new-page: true
on-arrival: {!
Q.last_advisor_action = 0;
Q.last_cabinet_action = 0;
// make sure no stat is below 0.
for (var c of Q.classes) {
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
    }
}

Q.pro_republic = Math.round(Q.pro_republic);
Q.nationalism = Math.round(Q.nationalism);
Q.socialism = Math.round(Q.socialism);

if (Q.pro_republic < 0) {
    Q.pro_republic = 0;
}
if (Q.pro_republic >= 100) {
    Q.pro_republic = 99;
}
// re-calculate party support
// calculate normalized class voting for the achievements
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}
// calculate support for each of the parties
var total_support = 0; 
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        if (Q.old_demographics) { 
            party_support += Q[c]*Q[c+'_'+party];
        } else  { 
            party_support += Q[c]*Q[c+'_'+party+'_normalized'];
        } 
    }
    Q[party + '_support'] = party_support;
    total_support += party_support; 
}
// 2. normalize support (fraction)
for (var party of Q.parties) {
    Q[party+'_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_votes'] = Math.round(Q[party+'_normalized']*100);
    Q[party+'_votes_display'] = Math.round(Q[party+'_normalized']*100);
}


// set faction strength/dissent to 0
for (var c of Q.factions) {
    if (Q[c+'_dissent'] < 0) {
        Q[c+'_dissent'] = 0;
    } else if (Q[c+'_dissent'] >= 100) {
        Q[c+'_dissent'] = 99;
    }
    if (Q[c+'_strength'] < 0) {
        Q[c+'_strength'] = 0;
    }
}

if (Q.unemployed <= 1) {
    Q.unemployed = 1;
}

// re-calculate dissent.
var total_strength = Q.left_strength + Q.center_strength + Q.aenglunders_strength + Q.reformist_strength;

// normalize strength for the different factions
Q.left_strength = 100*Q.left_strength/total_strength;
Q.center_strength = 100*Q.center_strength/total_strength;
Q.aenglunders_strength = 100*Q.aenglunders_strength/total_strength;
Q.reformist_strength = 100*Q.reformist_strength/total_strength;

var total_dissent = Q.left_strength*Q.left_dissent + Q.center_strength*Q.center_dissent + Q.aenglunders_strength*Q.aenglunders_dissent + Q.reformist_strength*Q.reformist_dissent;

Q.dissent = 0.01*total_dissent/total_strength;
Q.dissent_percent = Q.dissent*100;
console.log('new dissent: ' + Q.dissent);

if (Q.dissent < 0) {
    Q.dissent = 0;
} else if (Q.dissent > 0.95) {
    Q.dissent = 0.95;
}

// 1. update dates
if (Q.month_actions >= 1) {
    Q.time += 1;
    Q.month_actions = 0;
    Q.month += 1;
    if (Q.month >= 13) {
        Q.month = 1;
        Q.year += 1;
    }
    // decrement timers
    for (timer of Q.timers) {
        if (Q[timer+'_timer'] && Q[timer+'_timer'] > 0) {
            Q[timer+'_timer'] -= 1;
        }
    }
    // append to historical party support records
    var party_support_results = {'date': new Date(Q.year, Q.month - 1)};
    for (var party of Q.parties) {
        party_support_results[party] = Q[party + '_normalized']*100;
    }
    Q.party_support_records.push(party_support_results);
    Q.economic_records.push({'date': new Date(Q.year, Q.month - 1),
                             'inflation': Q.inflation,
                             'unemployment': Q.unemployed});
    // change economic stats...
    // we're basically implicity drawing a Philips curve
    // budget deficits lead to some inflation
    if (Q.budget <= 0 && Q.budget > -2 && Q.inflation < 2.5) {
        Q.inflation += 0.1;
    }
    if (Q.budget <= -2 && Q.budget > -5 && Q.inflation < 5) {
        Q.inflation += 0.2;
        if (Q.unemployed >= 12) {
            Q.inflation -= 0.1;
        }
    }
    if (Q.budget <= -5 && Q.inflation < 10) {
        Q.inflation += 0.3;
        if (Q.unemployed >= 15) {
            Q.inflation -= 0.1;
        }
    }
    // deflation is bad
    if (Q.inflation < -0.5 && Q.inflation > -5 && Q.unemployed < 15) {
        Q.unemployed += 0.2;
    }
    if (Q.inflation <= -5 && Q.unemployed < 20) {
        Q.unemployed += 0.3;
    }
    // economic growth
    if (Q.economic_growth < -0.5 && Q.unemployed <= 18) {
        Q.unemployed += 0.1;
    }
    if (Q.economic_growth < -5 && Q.unemployed <= 28) {
        Q.unemployed += 0.1;
    }
    if (Q.economic_growth >= 2 && Q.unemployed >= 17) {
        Q.unemployed -= 0.1;
    }
    if (Q.economic_growth >= 4 && Q.unemployed >= 12) {
        Q.unemployed -= 0.1;
    }
    if (Q.economic_growth >= 6 && Q.unemployed >= 7) {
        Q.unemployed -= 0.1;
    }
    if (Q.economic_growth >= 8 && Q.unemployed >= 3) {
        Q.unemployed -= 0.1;
    }
    if (Q.economic_growth >= 4 && Q.inflation >= 7.5) {
        Q.economic_growth -= 0.1;
    }
    if (Q.economic_growth >= -2.5 && Q.inflation <= -5) {
        Q.economic_growth -= 0.1;
    }
    if (Q.economic_growth >= 7) {
        Q.economic_growth -= 0.1;
    }
    if (Q.economic_growth >= 10) {
        Q.economic_growth -= 0.2;
    }
    if (Q.economic_growth >= 12) {
        Q.economic_growth -= 0.3;
    }

    //////////////////////////////// Education & Science support/economic changes
    if (Q.major_curriculum && Q.major_curriculum == "democratic") {
        if (Q.pro_republic < 60) {
            Q.pro_republic += 0.5;
        } 
    }
    if (Q.minor_curriculum && Q.minor_curriculum == "democratic") {
        if (Q.pro_republic < 60) {
            Q.pro_republic += 0.3;
        } 
    }
    // science bonus to economic growth
    // education bonus
    Q.science_bonus = 0;
    if (Q.education_science) {
        Q.science_bonus += Q.education_science;
    }
    if (Q.science) {
        if (Q.science >= 1) {
            Q.science_bonus += 1;
        } else if (Q.science >= 3) {
            Q.science_bonus += 2;
        } else if (Q.science >= 5) {
            Q.science_bonus += 3;
        }
    }
    if (Q.applied_research && Q.applied_research >= 1) {
        Q.science_bonus += 0.5*Q.applied_research;
    }
    // cap the science bonus at 6
    if (Q.science_bonus > 6) {
        Q.science_bonus = 6;
    }
    console.log(Q.science_bonus);
    // this is kinda messy but basically more science -> higher levels of baseline growth
    if (Q.science_bonus >= 1) {
        if (Q.return_to_normalcy && Q.economic_growth < Q.science_bonus + 3) {
            Q.economic_growth += 0.1;
        }
        if (Q.return_to_normalcy && Q.economic_growth < Q.science_bonus) {
            Q.economic_growth += 0.1;
        }
        if (Q.economic_growth < Q.science_bonus - 3) {
            Q.economic_growth += 0.1;
        }
    }
    // accumulated economic growth/decline
    // Maybe there should be differences for positive/negative growth?
    if (Q.economic_growth < 0) {
        if (Q.economic_expansion > 0) {
            Q.economic_expansion = 0;
        } else {
            Q.economic_expansion += Q.economic_growth;
        }
    }
    if (Q.economic_growth > 0 && Q.reparations <= -2 && Q.pop_in_government) {
        Q.economic_expansion += Q.economic_growth;
    } else if (Q.economic_growth > 0 && Q.pop_in_government) {
        Q.economic_expansion += Q.economic_growth/2;
    }
    /////////////////////////////// update opinions based on economy
    if (Q.unemployed > 15 && Q.pro_republic > 40) {
        Q.pro_republic -= 1;
    }
    if (Q.unemployed > 30 && Q.pro_republic > 20) {
        Q.pro_republic -= 1;
    }
    if (Q.inflation >= 8 && Q.pro_republic > 40) {
        Q.pro_republic -= 1;
    }

///////////////////////////// incumbent party penalty/bonus system based on public opinion
    // Update public opinion based on economic conditions
    if (Q.unemployed > 15 || Q.inflation > 6) {
        Q.public_opinion_on_gov -= 2/12; // Bad economy hurts government approval
    } else if (Q.unemployed < 8 && Q.inflation < 3 && Q.economic_growth > 2) {
        Q.public_opinion_on_gov += 1/12; // Good economy helps government approval
    }
    
    // Cap public opinion between -50 and 50
    if (Q.public_opinion_on_gov > 50) {
        Q.public_opinion_on_gov = 50;
    } else if (Q.public_opinion_on_gov < -50) {
        Q.public_opinion_on_gov = -50;
    }
    
    // Parties in government lose or gain support based on public opinion
    var governing_parties = [];
    var opposition_parties = [];
    
    // Determine which parties are in government
    if (Q.pop_in_government) governing_parties.push('pop');
    if (Q.pat_in_government) governing_parties.push('pat');
    if (Q.prog_in_government) governing_parties.push('prog');
    if (Q.stats_in_government) governing_parties.push('stats');
    if (Q.rust_in_government) governing_parties.push('rust');
    if (Q.socs_in_government) governing_parties.push('socs');
    
    // All other parties are opposition
    for (var party of Q.parties) {
        if (party !== 'other' && !governing_parties.includes(party)) {
            opposition_parties.push(party);
        }
    }
    
    // Calculate support change based on public opinion
    var support_change = 0;
    if (Q.public_opinion_on_gov < -10) {
        support_change = -1.5/12; // Strong penalty for unpopular government
    } else if (Q.public_opinion_on_gov < 0) {
        support_change = -0.8/12; // Moderate penalty
    } else if (Q.public_opinion_on_gov > 10) {
        support_change = 0.8/12; // Bonus for popular government
    } else if (Q.public_opinion_on_gov > 0) {
        support_change = 0.4/12; // Small bonus
    }
    
    // Apply changes to governing parties
    var total_change = 0;
    for (var gov_party of governing_parties) {
        for (var c of Q.classes) {
            if (support_change < 0 && Q[c+'_'+gov_party] > 0) {
                // Government losing support
                var loss = Math.min(Q[c+'_'+gov_party], Math.abs(support_change));
                Q[c+'_'+gov_party] -= loss;
                total_change += loss;
            } else if (support_change > 0) {
                // Government gaining support (taken from opposition)
                Q[c+'_'+gov_party] += support_change;
                total_change += support_change;
            }
        }
    }
    
    // Distribute changes to/from opposition parties
    if (opposition_parties.length > 0 && total_change !== 0) {
        if (support_change < 0) {
            // Government losing support - opposition gains
            var gain_per_party = total_change / opposition_parties.length;
            for (var opp_party of opposition_parties) {
                // Different opposition parties gain at different rates based on their nature
                var party_multiplier = 1;
                if (opp_party === 'stats') {
                    party_multiplier = 1; 
                } else if (opp_party === 'socs') {
                    party_multiplier = 0.8; 
                } else if (opp_party === 'rust') {
                    party_multiplier = 0.9; 
                } else if (opp_party === 'prog') {
                    party_multiplier = 0.9; 
                } else if (opp_party === 'pop') {
                    party_multiplier = 1.2; 
                }
                
                var adjusted_gain = gain_per_party * party_multiplier;
                
                // Distribute gains based on party's natural demographics
                if (opp_party === 'stats') {
                    Q.workers_prog += adjusted_gain * 0.05;
                    Q.unemployed_pat += adjusted_gain * 0.1;
                    Q.rural_pat += adjusted_gain * 0.15;
                    Q.new_middle_prog += adjusted_gain * 0.25;
                    Q.old_middle_prog += adjusted_gain * 0.45;
                } else if (opp_party === 'socs') {
                    Q.workers_prog += adjusted_gain * 0.6;
                    Q.unemployed_pat += adjusted_gain * 0.2;
                    Q.rural_pat += adjusted_gain * 0.05;
                    Q.new_middle_prog += adjusted_gain * 0.05;
                    Q.old_middle_prog += adjusted_gain * 0;
                } else if (opp_party === 'rust') {
                    Q.workers_prog += adjusted_gain * 0.1;
                    Q.unemployed_pat += adjusted_gain * 0.1;
                    Q.rural_pat += adjusted_gain * 0.7;
                    Q.new_middle_prog += adjusted_gain * 0.05;
                    Q.old_middle_prog += adjusted_gain * 0.05;
                } else if (opp_party === 'prog') {
                    Q.workers_prog += adjusted_gain * 0.3;
                    Q.unemployed_pat += adjusted_gain * 0.05;
                    Q.rural_pat += adjusted_gain * 0.05;
                    Q.new_middle_prog += adjusted_gain * 0.45;
                    Q.old_middle_prog += adjusted_gain * 0.15;
                } else if (opp_party === 'pat') {
                    Q.workers_prog += adjusted_gain * 0.1;
                    Q.unemployed_pat += adjusted_gain * 0.2;
                    Q.rural_pat += adjusted_gain * 0.3;
                    Q.new_middle_prog += adjusted_gain * 0.1;
                    Q.old_middle_prog += adjusted_gain * 0.3;
                } else if (opp_party === 'pop') {
                    Q.workers_prog += adjusted_gain * 0.55;
                    Q.unemployed_pat += adjusted_gain * 0.3;
                    Q.rural_pat += adjusted_gain * 0.05;
                    Q.new_middle_prog += adjusted_gain * 0.05;
                    Q.old_middle_prog += adjusted_gain * 0.05;
                }
            }
        } else {
            // Government gaining support - take from opposition
            var loss_per_party = total_change / opposition_parties.length;
            for (var opp_party of opposition_parties) {
                for (var c of Q.classes) {
                    if (Q[c+'_'+opp_party] > 0) {
                        var loss = Math.min(Q[c+'_'+opp_party], loss_per_party / Q.classes.length);
                        Q[c+'_'+opp_party] -= loss;
                    }
                }
            }
        }
    }
}
Q.has_event = 0;
// check if there are any cards in #event, and then go to main if not.
var scene = this.game.scenes['post_event.events_choice'];
var choices = this._compileChoices(scene);
if (choices && choices[0].title != "Continue...") {
    Q.has_event = 1;
} else {
    has_event = 0;
}
// pre-load all of the event images
if (this.ui && this.ui.show_portraits) {
    for (var choice of choices) {
        var cc = this.game.scenes[choice.id];
        if (cc.faceImage) {
            var im = new Image();
            im.url = cc.faceImage;
        }
    }
}

if (typeof window !== "undefined" && window.generateBar) {
}
!}
go-to: events_choice if has_event = 1; main if has_event = 0

= [+ month : month +] [+ year +]

@events_choice

- #event

# This scene is solely for updating numbers after events, and routing to special events.